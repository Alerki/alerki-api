generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./"
  outputName = "schema.dbml"
}

generator nestgraphql {
  provider        = "node node_modules/prisma-nestjs-graphql"
  output          = "../src/@generated"
  purgeOutput     = "true"
  emitSingle      = "true"
  emitBlocks      = ["outputs", "models", "enums"]
  omitModelsCount = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointments {
  id              String          @id @default(uuid()) @db.Uuid
  status          String          @default("draft") @db.VarChar(255)
  date_created    DateTime?       @db.Timestamptz(6)
  date_updated    DateTime?       @db.Timestamptz(6)
  MasterServiceId String          @map("MasterService") @db.Uuid
  ClientProfileId String?         @map("ClientProfile") @db.Uuid
  duration        DateTime        @db.Time(6)
  price           Int
  CurrencyId      Int             @map("Currency")
  startAt         DateTime        @db.Timestamptz(6)
  endAt           DateTime        @db.Timestamptz(6)
  confirmed       Boolean         @default(false)
  cancelled       Boolean         @default(false)
  ClientProfile   ClientProfiles? @relation(fields: [ClientProfileId], references: [id], onUpdate: NoAction, map: "appointments_clientprofile_foreign")
  Currency        Currency        @relation("Appointments_CurrencyToCurrency", fields: [CurrencyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointments_currency_foreign")
  MasterService   MasterService   @relation("Appointments_MasterServiceToMasterService", fields: [MasterServiceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointments_masterservice_foreign")
}

model ClientProfiles {
  id           String         @id @default(uuid()) @db.Uuid
  status       String         @default("draft") @db.VarChar(255)
  date_created DateTime?      @db.Timestamptz(6)
  date_updated DateTime?      @db.Timestamptz(6)
  Appointments Appointments[]
  Users        Users[]
}

model Currency {
  id                                                   Int             @id @default(autoincrement())
  status                                               String          @default("draft") @db.VarChar(255)
  sort                                                 Int?
  user_created                                         String?         @default(uuid()) @db.Uuid
  date_created                                         DateTime?       @db.Timestamptz(6)
  user_updated                                         String?         @default(uuid()) @db.Uuid
  date_updated                                         DateTime?       @db.Timestamptz(6)
  code                                                 String          @unique(map: "currency_code_unique") @db.VarChar(3)
  character                                            String          @db.VarChar(10)
  name                                                 String?         @db.VarChar(255)
  Appointments                                         Appointments[]  @relation("Appointments_CurrencyToCurrency")
  directus_users_Currency_user_createdTodirectus_users directus_users? @relation("Currency_user_createdTodirectus_users", fields: [user_created], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "currency_user_created_foreign")
  directus_users_Currency_user_updatedTodirectus_users directus_users? @relation("Currency_user_updatedTodirectus_users", fields: [user_updated], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "currency_user_updated_foreign")
  MasterServices                                       MasterService[] @relation("MasterService_CurrencyToCurrency")
}

model MasterProfile {
  id                     String                @id @default(uuid()) @db.Uuid
  status                 String                @default("draft") @db.VarChar(255)
  date_created           DateTime?             @db.Timestamptz(6)
  date_updated           DateTime?             @db.Timestamptz(6)
  MasterWeeklyScheduleId String?               @unique(map: "masterprofile_masterweeklyschedule_unique") @map("MasterWeeklySchedule") @db.Uuid
  MasterWeeklySchedule   MasterWeeklySchedule? @relation("MasterProfile_MasterWeeklyScheduleToMasterWeeklySchedule", fields: [MasterWeeklyScheduleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "masterprofile_masterweeklyschedule_foreign")
  MasterSchedules        MasterSchedule[]      @relation("MasterSchedule_MasterProfileToMasterProfile")
  MasterServices         MasterService[]       @relation("MasterService_MasterProfileToMasterProfile")
  Users                  Users[]
}

model MasterSchedule {
  id              String        @id @default(uuid()) @db.Uuid
  status          String        @default("draft") @db.VarChar(255)
  date_created    DateTime?     @db.Timestamptz(6)
  date_updated    DateTime?     @db.Timestamptz(6)
  startAt         DateTime      @db.Timestamptz(6)
  endAt           DateTime      @db.Timestamptz(6)
  dayOff          Boolean       @default(false)
  MasterProfileId String        @map("MasterProfile") @db.Uuid
  MasterProfile   MasterProfile @relation("MasterSchedule_MasterProfileToMasterProfile", fields: [MasterProfileId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "masterschedule_masterprofile_foreign")
}

model MasterService {
  id              String         @id @default(uuid()) @db.Uuid
  status          String         @default("draft") @db.VarChar(255)
  date_created    DateTime?      @db.Timestamptz(6)
  date_updated    DateTime?      @db.Timestamptz(6)
  ServiceId       String         @map("Service") @db.Uuid
  MasterProfileId String         @map("MasterProfile") @db.Uuid
  duration        DateTime       @db.Time(6)
  price           Float          @db.Real
  CurrencyId      Int            @map("Currency")
  Appointments    Appointments[] @relation("Appointments_MasterServiceToMasterService")
  Currency        Currency       @relation("MasterService_CurrencyToCurrency", fields: [CurrencyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "masterservice_currency_foreign")
  MasterProfile   MasterProfile  @relation("MasterService_MasterProfileToMasterProfile", fields: [MasterProfileId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "masterservice_masterprofile_foreign")
  Service         Service        @relation("MasterService_ServiceToService", fields: [ServiceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "masterservice_service_foreign")
}

model MasterWeeklySchedule {
  id            String         @id @default(uuid()) @db.Uuid
  status        String         @default("draft") @db.VarChar(255)
  date_created  DateTime?      @db.Timestamptz(6)
  date_updated  DateTime?      @db.Timestamptz(6)
  Monday        Boolean?       @default(true)
  Tuesday       Boolean?       @default(true)
  Wednesday     Boolean?       @default(true)
  Thursday      Boolean?       @default(true)
  Friday        Boolean?       @default(true)
  Saturday      Boolean?       @default(false)
  Sunday        Boolean?       @default(false)
  startAt       DateTime       @db.Timestamptz(6)
  endAt         DateTime       @db.Timestamptz(6)
  MasterProfile MasterProfile? @relation("MasterProfile_MasterWeeklyScheduleToMasterWeeklySchedule")
}

model Service {
  id                                                  String                 @id @default(uuid()) @db.Uuid
  status                                              String                 @default("draft") @db.VarChar(255)
  sort                                                Int?
  user_created                                        String?                @default(uuid()) @db.Uuid
  date_created                                        DateTime?              @db.Timestamptz(6)
  user_updated                                        String?                @default(uuid()) @db.Uuid
  date_updated                                        DateTime?              @db.Timestamptz(6)
  MasterServices                                      MasterService[]        @relation("MasterService_ServiceToService")
  directus_users_Service_user_createdTodirectus_users directus_users?        @relation("Service_user_createdTodirectus_users", fields: [user_created], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_user_created_foreign")
  directus_users_Service_user_updatedTodirectus_users directus_users?        @relation("Service_user_updatedTodirectus_users", fields: [user_updated], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_user_updated_foreign")
  Service_translations                                Service_translations[]
}

model Service_translations {
  id           Int        @id @default(autoincrement())
  Service_id   String?    @default(uuid()) @db.Uuid
  languages_id String?    @db.VarChar(255)
  name         String?    @db.VarChar(255)
  languages    languages? @relation(fields: [languages_id], references: [code], onUpdate: NoAction, map: "service_translations_languages_id_foreign")
  Service      Service?   @relation(fields: [Service_id], references: [id], onUpdate: NoAction, map: "service_translations_service_id_foreign")
}

model Sessions {
  id           String    @id @default(uuid()) @db.Uuid
  status       String    @default("draft") @db.VarChar(255)
  date_created DateTime? @db.Timestamptz(6)
  date_updated DateTime? @db.Timestamptz(6)
  UserId       String    @map("Users") @db.Uuid
  refreshToken String    @db.VarChar(1025)
  deviceName   String?   @default("Undefined") @db.VarChar(255)
  User         Users     @relation("Sessions_Users", fields: [UserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sessions_users_foreign")
}

model Users {
  id                      String          @id @default(uuid()) @db.Uuid
  status                  String          @default("draft") @db.VarChar(255)
  date_created            DateTime?       @db.Timestamptz(6)
  date_updated            DateTime?       @db.Timestamptz(6)
  email                   String          @db.VarChar(320)
  firstName               String?         @db.VarChar(255)
  lastName                String?         @db.VarChar(255)
  username                String          @db.VarChar(25)
  password                String?         @db.VarChar(1024)
  MasterProfileId         String?         @map("MasterProfile") @db.Uuid
  ClientProfileId         String?         @map("ClientProfile") @db.Uuid
  pictureUrl              String?         @db.VarChar(255)
  Language                String          @db.VarChar(255)
  Sessions_Sessions_Users Sessions[]      @relation("Sessions_Users")
  ClientProfile           ClientProfiles? @relation(fields: [ClientProfileId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_clientprofile_foreign")
  languages               languages       @relation(fields: [Language], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "users_language_foreign")
  MasterProfile           MasterProfile?  @relation(fields: [MasterProfileId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_masterprofile_foreign")
}

model directus_activity {
  id                 Int                  @id @default(autoincrement())
  action             String               @db.VarChar(45)
  user               String?              @default(uuid()) @db.Uuid
  timestamp          DateTime             @default(now()) @db.Timestamptz(6)
  ip                 String?              @db.VarChar(50)
  user_agent         String?              @db.VarChar(255)
  collection         String               @db.VarChar(64)
  item               String               @db.VarChar(255)
  comment            String?
  origin             String?              @db.VarChar(255)
  directus_revisions directus_revisions[]
}

model directus_collections {
  collection                 String                 @id @db.VarChar(64)
  icon                       String?                @db.VarChar(30)
  note                       String?
  display_template           String?                @db.VarChar(255)
  hidden                     Boolean                @default(false)
  singleton                  Boolean                @default(false)
  translations               Json?                  @db.Json
  archive_field              String?                @db.VarChar(64)
  archive_app_filter         Boolean                @default(true)
  archive_value              String?                @db.VarChar(255)
  unarchive_value            String?                @db.VarChar(255)
  sort_field                 String?                @db.VarChar(64)
  accountability             String?                @default("all") @db.VarChar(255)
  color                      String?                @db.VarChar(255)
  item_duplication_fields    Json?                  @db.Json
  sort                       Int?
  group                      String?                @db.VarChar(64)
  collapse                   String                 @default("open") @db.VarChar(255)
  preview_url                String?                @db.VarChar(255)
  versioning                 Boolean                @default(false)
  directus_collections       directus_collections?  @relation("directus_collectionsTodirectus_collections", fields: [group], references: [collection], onDelete: NoAction, onUpdate: NoAction, map: "directus_collections_group_foreign")
  other_directus_collections directus_collections[] @relation("directus_collectionsTodirectus_collections")
  directus_shares            directus_shares[]
  directus_versions          directus_versions[]
}

model directus_dashboards {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @db.VarChar(255)
  icon            String            @default("dashboard") @db.VarChar(30)
  note            String?
  date_created    DateTime?         @default(now()) @db.Timestamptz(6)
  user_created    String?           @default(uuid()) @db.Uuid
  color           String?           @db.VarChar(255)
  directus_users  directus_users?   @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_dashboards_user_created_foreign")
  directus_panels directus_panels[]
}

model directus_extensions {
  enabled Boolean @default(true)
  id      String  @id @default(uuid()) @db.Uuid
  folder  String  @db.VarChar(255)
  source  String  @db.VarChar(255)
  bundle  String? @default(uuid()) @db.Uuid
}

model directus_fields {
  id                 Int      @id @default(autoincrement())
  collection         String   @db.VarChar(64)
  field              String   @db.VarChar(64)
  special            String?  @db.VarChar(64)
  interface          String?  @db.VarChar(64)
  options            Json?    @db.Json
  display            String?  @db.VarChar(64)
  display_options    Json?    @db.Json
  readonly           Boolean  @default(false)
  hidden             Boolean  @default(false)
  sort               Int?
  width              String?  @default("full") @db.VarChar(30)
  translations       Json?    @db.Json
  note               String?
  conditions         Json?    @db.Json
  required           Boolean? @default(false)
  group              String?  @db.VarChar(64)
  validation         Json?    @db.Json
  validation_message String?
}

model directus_files {
  id                                                                    String              @id @default(uuid()) @db.Uuid
  storage                                                               String              @db.VarChar(255)
  filename_disk                                                         String?             @db.VarChar(255)
  filename_download                                                     String              @db.VarChar(255)
  title                                                                 String?             @db.VarChar(255)
  type                                                                  String?             @db.VarChar(255)
  folder                                                                String?             @default(uuid()) @db.Uuid
  uploaded_by                                                           String?             @default(uuid()) @db.Uuid
  uploaded_on                                                           DateTime            @default(now()) @db.Timestamptz(6)
  modified_by                                                           String?             @default(uuid()) @db.Uuid
  modified_on                                                           DateTime            @default(now()) @db.Timestamptz(6)
  charset                                                               String?             @db.VarChar(50)
  filesize                                                              BigInt?
  width                                                                 Int?
  height                                                                Int?
  duration                                                              Int?
  embed                                                                 String?             @db.VarChar(200)
  description                                                           String?
  location                                                              String?
  tags                                                                  String?
  metadata                                                              Json?               @db.Json
  focal_point_x                                                         Int?
  focal_point_y                                                         Int?
  directus_folders                                                      directus_folders?   @relation(fields: [folder], references: [id], onUpdate: NoAction, map: "directus_files_folder_foreign")
  directus_users_directus_files_modified_byTodirectus_users             directus_users?     @relation("directus_files_modified_byTodirectus_users", fields: [modified_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_modified_by_foreign")
  directus_users_directus_files_uploaded_byTodirectus_users             directus_users?     @relation("directus_files_uploaded_byTodirectus_users", fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_uploaded_by_foreign")
  directus_settings_directus_settings_project_logoTodirectus_files      directus_settings[] @relation("directus_settings_project_logoTodirectus_files")
  directus_settings_directus_settings_public_backgroundTodirectus_files directus_settings[] @relation("directus_settings_public_backgroundTodirectus_files")
  directus_settings_directus_settings_public_faviconTodirectus_files    directus_settings[] @relation("directus_settings_public_faviconTodirectus_files")
  directus_settings_directus_settings_public_foregroundTodirectus_files directus_settings[] @relation("directus_settings_public_foregroundTodirectus_files")
}

model directus_flows {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String                @db.VarChar(255)
  icon                String?               @db.VarChar(30)
  color               String?               @db.VarChar(255)
  description         String?
  status              String                @default("active") @db.VarChar(255)
  trigger             String?               @db.VarChar(255)
  accountability      String?               @default("all") @db.VarChar(255)
  options             Json?                 @db.Json
  operation           String?               @unique(map: "directus_flows_operation_unique") @default(uuid()) @db.Uuid
  date_created        DateTime?             @default(now()) @db.Timestamptz(6)
  user_created        String?               @default(uuid()) @db.Uuid
  directus_users      directus_users?       @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_flows_user_created_foreign")
  directus_operations directus_operations[]
}

model directus_folders {
  id                     String              @id @default(uuid()) @db.Uuid
  name                   String              @db.VarChar(255)
  parent                 String?             @default(uuid()) @db.Uuid
  directus_files         directus_files[]
  directus_folders       directus_folders?   @relation("directus_foldersTodirectus_folders", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_folders_parent_foreign")
  other_directus_folders directus_folders[]  @relation("directus_foldersTodirectus_folders")
  directus_settings      directus_settings[]
}

model directus_migrations {
  version   String    @id @db.VarChar(255)
  name      String    @db.VarChar(255)
  timestamp DateTime? @default(now()) @db.Timestamptz(6)
}

model directus_notifications {
  id                                                              Int             @id @default(autoincrement())
  timestamp                                                       DateTime?       @default(now()) @db.Timestamptz(6)
  status                                                          String?         @default("inbox") @db.VarChar(255)
  recipient                                                       String          @default(uuid()) @db.Uuid
  sender                                                          String?         @default(uuid()) @db.Uuid
  subject                                                         String          @db.VarChar(255)
  message                                                         String?
  collection                                                      String?         @db.VarChar(64)
  item                                                            String?         @db.VarChar(255)
  directus_users_directus_notifications_recipientTodirectus_users directus_users  @relation("directus_notifications_recipientTodirectus_users", fields: [recipient], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_notifications_recipient_foreign")
  directus_users_directus_notifications_senderTodirectus_users    directus_users? @relation("directus_notifications_senderTodirectus_users", fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_notifications_sender_foreign")
}

model directus_operations {
  id                                                                         String               @id @default(uuid()) @db.Uuid
  name                                                                       String?              @db.VarChar(255)
  key                                                                        String               @db.VarChar(255)
  type                                                                       String               @db.VarChar(255)
  position_x                                                                 Int
  position_y                                                                 Int
  options                                                                    Json?                @db.Json
  resolve                                                                    String?              @unique(map: "directus_operations_resolve_unique") @default(uuid()) @db.Uuid
  reject                                                                     String?              @unique(map: "directus_operations_reject_unique") @default(uuid()) @db.Uuid
  flow                                                                       String               @default(uuid()) @db.Uuid
  date_created                                                               DateTime?            @default(now()) @db.Timestamptz(6)
  user_created                                                               String?              @default(uuid()) @db.Uuid
  directus_flows                                                             directus_flows       @relation(fields: [flow], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_operations_flow_foreign")
  directus_operations_directus_operations_rejectTodirectus_operations        directus_operations? @relation("directus_operations_rejectTodirectus_operations", fields: [reject], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_reject_foreign")
  other_directus_operations_directus_operations_rejectTodirectus_operations  directus_operations? @relation("directus_operations_rejectTodirectus_operations")
  directus_operations_directus_operations_resolveTodirectus_operations       directus_operations? @relation("directus_operations_resolveTodirectus_operations", fields: [resolve], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_resolve_foreign")
  other_directus_operations_directus_operations_resolveTodirectus_operations directus_operations? @relation("directus_operations_resolveTodirectus_operations")
  directus_users                                                             directus_users?      @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_operations_user_created_foreign")
}

model directus_panels {
  id                  String              @id @default(uuid()) @db.Uuid
  dashboard           String              @default(uuid()) @db.Uuid
  name                String?             @db.VarChar(255)
  icon                String?             @db.VarChar(30)
  color               String?             @db.VarChar(10)
  show_header         Boolean             @default(false)
  note                String?
  type                String              @db.VarChar(255)
  position_x          Int
  position_y          Int
  width               Int
  height              Int
  options             Json?               @db.Json
  date_created        DateTime?           @default(now()) @db.Timestamptz(6)
  user_created        String?             @default(uuid()) @db.Uuid
  directus_dashboards directus_dashboards @relation(fields: [dashboard], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_panels_dashboard_foreign")
  directus_users      directus_users?     @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_panels_user_created_foreign")
}

model directus_permissions {
  id             Int             @id @default(autoincrement())
  role           String?         @default(uuid()) @db.Uuid
  collection     String          @db.VarChar(64)
  action         String          @db.VarChar(10)
  permissions    Json?           @db.Json
  validation     Json?           @db.Json
  presets        Json?           @db.Json
  fields         String?
  directus_roles directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_permissions_role_foreign")
}

model directus_presets {
  id               Int             @id @default(autoincrement())
  bookmark         String?         @db.VarChar(255)
  user             String?         @default(uuid()) @db.Uuid
  role             String?         @default(uuid()) @db.Uuid
  collection       String?         @db.VarChar(64)
  search           String?         @db.VarChar(100)
  layout           String?         @default("tabular") @db.VarChar(100)
  layout_query     Json?           @db.Json
  layout_options   Json?           @db.Json
  refresh_interval Int?
  filter           Json?           @db.Json
  icon             String?         @default("bookmark") @db.VarChar(30)
  color            String?         @db.VarChar(255)
  directus_roles   directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_role_foreign")
  directus_users   directus_users? @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_user_foreign")
}

model directus_relations {
  id                      Int     @id @default(autoincrement())
  many_collection         String  @db.VarChar(64)
  many_field              String  @db.VarChar(64)
  one_collection          String? @db.VarChar(64)
  one_field               String? @db.VarChar(64)
  one_collection_field    String? @db.VarChar(64)
  one_allowed_collections String?
  junction_field          String? @db.VarChar(64)
  sort_field              String? @db.VarChar(64)
  one_deselect_action     String  @default("nullify") @db.VarChar(255)
}

model directus_revisions {
  id                       Int                  @id @default(autoincrement())
  activity                 Int
  collection               String               @db.VarChar(64)
  item                     String               @db.VarChar(255)
  data                     Json?                @db.Json
  delta                    Json?                @db.Json
  parent                   Int?
  version                  String?              @default(uuid()) @db.Uuid
  directus_activity        directus_activity    @relation(fields: [activity], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_revisions_activity_foreign")
  directus_revisions       directus_revisions?  @relation("directus_revisionsTodirectus_revisions", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_revisions_parent_foreign")
  other_directus_revisions directus_revisions[] @relation("directus_revisionsTodirectus_revisions")
  directus_versions        directus_versions?   @relation(fields: [version], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_revisions_version_foreign")
}

model directus_roles {
  id                   String                 @id @default(uuid()) @db.Uuid
  name                 String                 @db.VarChar(100)
  icon                 String                 @default("supervised_user_circle") @db.VarChar(30)
  description          String?
  ip_access            String?
  enforce_tfa          Boolean                @default(false)
  admin_access         Boolean                @default(false)
  app_access           Boolean                @default(true)
  directus_permissions directus_permissions[]
  directus_presets     directus_presets[]
  directus_shares      directus_shares[]
  directus_users       directus_users[]
}

model directus_sessions {
  token           String           @id @db.VarChar(64)
  user            String?          @default(uuid()) @db.Uuid
  expires         DateTime         @db.Timestamptz(6)
  ip              String?          @db.VarChar(255)
  user_agent      String?          @db.VarChar(255)
  share           String?          @default(uuid()) @db.Uuid
  origin          String?          @db.VarChar(255)
  directus_shares directus_shares? @relation(fields: [share], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_share_foreign")
  directus_users  directus_users?  @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_user_foreign")
}

model directus_settings {
  id                                                                 Int               @id @default(autoincrement())
  project_name                                                       String            @default("Directus") @db.VarChar(100)
  project_url                                                        String?           @db.VarChar(255)
  project_color                                                      String            @default("#6644FF") @db.VarChar(255)
  project_logo                                                       String?           @default(uuid()) @db.Uuid
  public_foreground                                                  String?           @default(uuid()) @db.Uuid
  public_background                                                  String?           @default(uuid()) @db.Uuid
  public_note                                                        String?
  auth_login_attempts                                                Int?              @default(25)
  auth_password_policy                                               String?           @db.VarChar(100)
  storage_asset_transform                                            String?           @default("all") @db.VarChar(7)
  storage_asset_presets                                              Json?             @db.Json
  custom_css                                                         String?
  storage_default_folder                                             String?           @default(uuid()) @db.Uuid
  basemaps                                                           Json?             @db.Json
  mapbox_key                                                         String?           @db.VarChar(255)
  module_bar                                                         Json?             @db.Json
  project_descriptor                                                 String?           @db.VarChar(100)
  default_language                                                   String            @default("en-US") @db.VarChar(255)
  custom_aspect_ratios                                               Json?             @db.Json
  public_favicon                                                     String?           @default(uuid()) @db.Uuid
  default_appearance                                                 String            @default("auto") @db.VarChar(255)
  default_theme_light                                                String?           @db.VarChar(255)
  theme_light_overrides                                              Json?             @db.Json
  default_theme_dark                                                 String?           @db.VarChar(255)
  theme_dark_overrides                                               Json?             @db.Json
  directus_files_directus_settings_project_logoTodirectus_files      directus_files?   @relation("directus_settings_project_logoTodirectus_files", fields: [project_logo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_project_logo_foreign")
  directus_files_directus_settings_public_backgroundTodirectus_files directus_files?   @relation("directus_settings_public_backgroundTodirectus_files", fields: [public_background], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_background_foreign")
  directus_files_directus_settings_public_faviconTodirectus_files    directus_files?   @relation("directus_settings_public_faviconTodirectus_files", fields: [public_favicon], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_favicon_foreign")
  directus_files_directus_settings_public_foregroundTodirectus_files directus_files?   @relation("directus_settings_public_foregroundTodirectus_files", fields: [public_foreground], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_foreground_foreign")
  directus_folders                                                   directus_folders? @relation(fields: [storage_default_folder], references: [id], onUpdate: NoAction, map: "directus_settings_storage_default_folder_foreign")
}

model directus_shares {
  id                   String               @id @default(uuid()) @db.Uuid
  name                 String?              @db.VarChar(255)
  collection           String               @db.VarChar(64)
  item                 String               @db.VarChar(255)
  role                 String?              @default(uuid()) @db.Uuid
  password             String?              @db.VarChar(255)
  user_created         String?              @default(uuid()) @db.Uuid
  date_created         DateTime?            @default(now()) @db.Timestamptz(6)
  date_start           DateTime?            @db.Timestamptz(6)
  date_end             DateTime?            @db.Timestamptz(6)
  times_used           Int?                 @default(0)
  max_uses             Int?
  directus_sessions    directus_sessions[]
  directus_collections directus_collections @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_collection_foreign")
  directus_roles       directus_roles?      @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_role_foreign")
  directus_users       directus_users?      @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_shares_user_created_foreign")
}

model directus_translations {
  id       String @id @default(uuid()) @db.Uuid
  language String @db.VarChar(255)
  key      String @db.VarChar(255)
  value    String
}

model directus_users {
  id                                                                      String                   @id @default(uuid()) @db.Uuid
  first_name                                                              String?                  @db.VarChar(50)
  last_name                                                               String?                  @db.VarChar(50)
  email                                                                   String?                  @unique(map: "directus_users_email_unique") @db.VarChar(128)
  password                                                                String?                  @db.VarChar(255)
  location                                                                String?                  @db.VarChar(255)
  title                                                                   String?                  @db.VarChar(50)
  description                                                             String?
  tags                                                                    Json?                    @db.Json
  avatar                                                                  String?                  @default(uuid()) @db.Uuid
  language                                                                String?                  @db.VarChar(255)
  tfa_secret                                                              String?                  @db.VarChar(255)
  status                                                                  String                   @default("active") @db.VarChar(16)
  role                                                                    String?                  @default(uuid()) @db.Uuid
  token                                                                   String?                  @unique(map: "directus_users_token_unique") @db.VarChar(255)
  last_access                                                             DateTime?                @db.Timestamptz(6)
  last_page                                                               String?                  @db.VarChar(255)
  provider                                                                String                   @default("default") @db.VarChar(128)
  external_identifier                                                     String?                  @unique(map: "directus_users_external_identifier_unique") @db.VarChar(255)
  auth_data                                                               Json?                    @db.Json
  email_notifications                                                     Boolean?                 @default(true)
  appearance                                                              String?                  @db.VarChar(255)
  theme_dark                                                              String?                  @db.VarChar(255)
  theme_light                                                             String?                  @db.VarChar(255)
  theme_light_overrides                                                   Json?                    @db.Json
  theme_dark_overrides                                                    Json?                    @db.Json
  Currency_Currency_user_createdTodirectus_users                          Currency[]               @relation("Currency_user_createdTodirectus_users")
  Currency_Currency_user_updatedTodirectus_users                          Currency[]               @relation("Currency_user_updatedTodirectus_users")
  Service_Service_user_createdTodirectus_users                            Service[]                @relation("Service_user_createdTodirectus_users")
  Service_Service_user_updatedTodirectus_users                            Service[]                @relation("Service_user_updatedTodirectus_users")
  directus_dashboards                                                     directus_dashboards[]
  directus_files_directus_files_modified_byTodirectus_users               directus_files[]         @relation("directus_files_modified_byTodirectus_users")
  directus_files_directus_files_uploaded_byTodirectus_users               directus_files[]         @relation("directus_files_uploaded_byTodirectus_users")
  directus_flows                                                          directus_flows[]
  directus_notifications_directus_notifications_recipientTodirectus_users directus_notifications[] @relation("directus_notifications_recipientTodirectus_users")
  directus_notifications_directus_notifications_senderTodirectus_users    directus_notifications[] @relation("directus_notifications_senderTodirectus_users")
  directus_operations                                                     directus_operations[]
  directus_panels                                                         directus_panels[]
  directus_presets                                                        directus_presets[]
  directus_sessions                                                       directus_sessions[]
  directus_shares                                                         directus_shares[]
  directus_roles                                                          directus_roles?          @relation(fields: [role], references: [id], onUpdate: NoAction, map: "directus_users_role_foreign")
  directus_versions_directus_versions_user_createdTodirectus_users        directus_versions[]      @relation("directus_versions_user_createdTodirectus_users")
  directus_versions_directus_versions_user_updatedTodirectus_users        directus_versions[]      @relation("directus_versions_user_updatedTodirectus_users")
}

model directus_versions {
  id                                                            String               @id @default(uuid()) @db.Uuid
  key                                                           String               @db.VarChar(64)
  name                                                          String?              @db.VarChar(255)
  collection                                                    String               @db.VarChar(64)
  item                                                          String               @db.VarChar(255)
  hash                                                          String?              @db.VarChar(255)
  date_created                                                  DateTime?            @default(now()) @db.Timestamptz(6)
  date_updated                                                  DateTime?            @default(now()) @db.Timestamptz(6)
  user_created                                                  String?              @default(uuid()) @db.Uuid
  user_updated                                                  String?              @default(uuid()) @db.Uuid
  directus_revisions                                            directus_revisions[]
  directus_collections                                          directus_collections @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: NoAction, map: "directus_versions_collection_foreign")
  directus_users_directus_versions_user_createdTodirectus_users directus_users?      @relation("directus_versions_user_createdTodirectus_users", fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_versions_user_created_foreign")
  directus_users_directus_versions_user_updatedTodirectus_users directus_users?      @relation("directus_versions_user_updatedTodirectus_users", fields: [user_updated], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_versions_user_updated_foreign")
}

model directus_webhooks {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  method      String  @default("POST") @db.VarChar(10)
  url         String  @db.VarChar(255)
  status      String  @default("active") @db.VarChar(10)
  data        Boolean @default(true)
  actions     String  @db.VarChar(100)
  collections String  @db.VarChar(255)
  headers     Json?   @db.Json
}

model languages {
  code                 String                 @id @db.VarChar(255)
  name                 String?                @db.VarChar(255)
  direction            String?                @default("ltr") @db.VarChar(255)
  Service_translations Service_translations[]
  Users                Users[]
}
