// Data source
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "file:./dev.db"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./"
  outputName = "schema.dbml"
}

model User {
  id                    String                        @id @default(uuid())
  email                 String                        @unique
  userEmail             UserEmail?
  phoneNumber           String?                       @unique
  userPhoneNumber       UserPhoneNumber?
  username              String                        @unique
  firstName             String?
  lastName              String?
  birthDate             DateTime?
  password              String
  sessions              Session[]
  isMaster              Boolean                       @default(false)
  masterProfile         MasterProfile?                @relation(fields: [masterProfileId], references: [id])
  masterProfileId       String?                       @unique
  clientProfile         ClientProfile                 @relation(fields: [clientProfileId], references: [id])
  clientProfileId       String                        @unique
  profileIsAvailable    Boolean                       @default(false)
  notificationRecipient UserRecipientOnNotification[]
  notificationSender    UserSenderOnNotification[]
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt

  @@map("Users")
}

model UserEmail {
  id                    String    @id @default(uuid())
  user                  User      @relation(fields: [userId], references: [id])
  userId                String    @unique
  emailIsVerificated    Boolean   @default(false)
  emailVerificationLink String
  verificationDate      DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("UsersEmails")
}

model UserPhoneNumber {
  id                           String    @id @default(uuid())
  user                         User      @relation(fields: [userId], references: [id])
  userId                       String    @unique
  phoneNumberIsVerified        Boolean   @default(false)
  phoneNumberVeirificationCode String
  verificationDate             DateTime?
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  @@map("UsersPhones")
}

model Session {
  id           String   @id @default(uuid())
  deviceName   String
  refreshToken String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("Sessions")
}

model MasterWeeklySchedule {
  id            String         @id @default(uuid())
  MasterProfile MasterProfile?
  monday        Boolean        @default(true) // true means that the day is not a day off
  tuesday       Boolean        @default(true)
  wednesday     Boolean        @default(true)
  thursday      Boolean        @default(true)
  friday        Boolean        @default(true)
  saturday      Boolean        @default(false) // saturday and sunday is a day off
  sunday        Boolean        @default(false)
  startAt       DateTime // start work time
  endAt         DateTime // end work time
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("MastersWeeklySchedules")
}

model MasterSchedule {
  id              String        @id @default(uuid())
  masterProfile   MasterProfile @relation(fields: [masterProfileId], references: [id])
  masterProfileId String
  date            DateTime
  startAt         DateTime?
  endAt           DateTime?
  dayOff          Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("MastersSchedules")
}

model MasterProfile {
  id               String               @id @default(uuid())
  user             User?
  schedules        MasterSchedule[]
  masterService    MasterService[]
  appointments     Appointment[]
  weeklySchedule   MasterWeeklySchedule @relation(fields: [weeklyScheduleId], references: [id])
  weeklyScheduleId String               @unique
  available        Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  @@map("MasterProfiles")
}

model ClientProfile {
  id           String        @id @default(uuid())
  user         User?
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("ClientProfiles")
}

model Service {
  id            String          @id @default(uuid())
  name          String          @unique
  available     Boolean         @default(true)
  masterService MasterService[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("Services")
}

model Currency {
  id        String   @id @default(uuid())
  code      String   @unique
  character String
  available Boolean  @default(true)
  // masterService MasterService[]
  // appointments Appointment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Currencies")
}

model MasterService {
  id              String        @id @default(uuid())
  masterProfile   MasterProfile @relation(fields: [masterProfileId], references: [id])
  masterProfileId String
  service         Service       @relation(fields: [serviceId], references: [id])
  serviceId       String
  duration        Int // In milliseconds
  // currency        Currency       @relation(fields: [currencyId], references: [id])
  // currencyId      String
  currency        String // temporary
  price           Int
  available       Boolean       @default(true)
  Appointments    Appointment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("MastersServices")
}

model Appointment {
  id              String        @id @default(uuid())
  masterService   MasterService @relation(fields: [masterServiceId], references: [id])
  masterServiceId String
  clientId        ClientProfile @relation(fields: [clientProfileId], references: [id])
  clientProfileId String
  masterProfile   MasterProfile @relation(fields: [masterProfileId], references: [id])
  masterProfileId String
  duration        Int
  // currency        Currency      @relation(fields: [currencyId], references: [id])
  // currencyId      String
  currency        String
  price           Int
  startAt         DateTime
  endAt           DateTime
  updatedAt       DateTime      @default(now())
  createdAt       DateTime      @updatedAt

  @@map("Appointments")
}

model UserRecipientOnNotification {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  updatedAt      DateTime     @default(now())
  createdAt      DateTime     @updatedAt
}

model UserSenderOnNotification {
  id             String       @id @default(uuid())
  nser           User         @relation(fields: [userId], references: [id])
  userId         String
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  updatedAt      DateTime     @default(now())
  createdAt      DateTime     @updatedAt
}

model NotificationType {
  id           String         @id @default(uuid())
  notification Notification[]
  updatedAt    DateTime       @default(now())
  createdAt    DateTime       @updatedAt

  @@map("NotificationTypes")
}

model Notification {
  id         String                        @id @default(uuid())
  type       NotificationType              @relation(fields: [typeId], references: [id])
  typeId     String
  recipients UserRecipientOnNotification[]
  sender     UserSenderOnNotification[]
  updatedAt  DateTime                      @default(now())
  createdAt  DateTime                      @updatedAt

  @@map("Notifications")
}
