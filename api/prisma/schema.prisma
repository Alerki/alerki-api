// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Database diagram: https://dbdiagram.io/d/63149a3b0911f91ba52fc231

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserPicture {
  id        String   @id @default(uuid())
  picture   Bytes    @db.ByteA()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?

  @@map("UserPictures")
}

model User {
  id          String               @id @default(uuid())
  username    String               @unique @db.VarChar(15)
  email       String               @unique @db.VarChar(320)
  firstName   String?              @db.VarChar(30)
  lastName    String?              @db.VarChar(30)
  picture     UserPicture?         @relation(fields: [pictureId], references: [id])
  pictureId   String?              @unique @db.VarChar(36)
  profiles    UserProfileOnUsers[]
  sessions    AuthSession[]
  phoneNumber String?              @unique @db.VarChar(16)
  password    String?              @db.VarChar(60)
  banned      Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@map("Users")
}

model Roles {
  id           String        @id @default(uuid())
  name         String        @unique @db.VarChar(20)
  userProfiles UserProfile[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model UserProfile {
  id                     String               @id @default(uuid())
  roles                  Roles[]
  users                  UserProfileOnUsers[]
  notificationsRecipient Notification[]       @relation("recipient")
  notificationsSender    Notification[]       @relation("sender")
  clientProfile          ClientProfile        @relation(fields: [clientProfileId], references: [id])
  clientProfileId        String               @unique @db.VarChar(36)
  masterProfile          MasterProfile        @relation(fields: [masterProfileId], references: [id])
  masterProfileId        String               @unique @db.VarChar(36)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@map("UserProfiles")
}

model UserProfileOnUsers {
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String      @unique @db.VarChar(36)
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.VarChar(36)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([userProfileId, userId])
}

model AuthSession {
  id           String   @id @default(uuid())
  users        User[]
  refreshToken String   @db.VarChar(1024)
  deviceName   String   @db.VarChar(20)
  fingerprint  String   @db.VarChar(256)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("AuthSessions")
}

model MasterProfile {
  id           String           @id @default(uuid())
  userProfile  UserProfile?
  services     MasterService[]
  schedule     MasterSchedule[]
  workDays     MasterWorkDay    @relation(fields: [workDaysId], references: [id])
  workDaysId   String           @unique @db.VarChar(36)
  appointments Appointment[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("MasterProfiles")
}

model ClientProfile {
  id           String        @id @default(uuid())
  userProfile  UserProfile?
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("ClientProfiles")
}

model Service {
  id             String          @id @default(uuid())
  name           String          @unique @db.VarChar(20)
  masterServices MasterService[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("Services")
}

model MasterService {
  id          String        @id @default(uuid())
  service     Service       @relation(fields: [serviceId], references: [id])
  serviceId   String        @db.VarChar(36)
  master      MasterProfile @relation(fields: [masterId], references: [id])
  masterId    String        @db.VarChar(36)
  currency    String        @db.VarChar(3)
  price       Int
  duration    DateTime      @db.Time()
  locationLat Float
  locationLng Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("MasterServices")
}

model MasterSchedule {
  id        String        @id @default(uuid())
  startTime DateTime      @db.Timetz()
  endTime   DateTime      @db.Timetz()
  date      DateTime      @db.Date
  dayOff    Boolean       @default(false)
  master    MasterProfile @relation(fields: [masterId], references: [id])
  masterId  String        @db.VarChar(36)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("MasterSchedules")
}

model MasterWorkDay {
  id        String         @id @default(uuid())
  monday    Boolean        @default(true)
  tuesday   Boolean        @default(true)
  wednesday Boolean        @default(true)
  thursday  Boolean        @default(true)
  friday    Boolean        @default(true)
  saturday  Boolean        @default(false)
  sunday    Boolean        @default(false)
  master    MasterProfile?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("MasterWorkDays")
}

model Appointment {
  id        String        @id @default(uuid())
  master    MasterProfile @relation(fields: [masterId], references: [id])
  masterId  String        @db.VarChar(36)
  client    ClientProfile @relation(fields: [clientId], references: [id])
  clientId  String        @db.VarChar(36)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("Appointments")
}

model NotificationType {
  id            String         @id @default(uuid())
  name          String         @db.VarChar(32)
  template      String         @db.VarChar(128)
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("NotificationTypes")
}

model Notification {
  id                 String           @id @default(uuid())
  notificationType   NotificationType @relation(fields: [notificationTypeId], references: [id])
  notificationTypeId String           @db.VarChar(36)
  recipient          UserProfile      @relation(fields: [recipientId], references: [id], name: "recipient")
  recipientId        String           @db.VarChar(36)
  sender             UserProfile      @relation(fields: [senderId], references: [id], name: "sender")
  senderId           String           @db.VarChar(36)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("Notifications")
}
