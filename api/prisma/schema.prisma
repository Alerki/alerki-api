generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MasterWeekendDays {
  id         String          @id @default(uuid())
  monday     Boolean         @default(false)
  tuesday    Boolean         @default(false)
  wednesday  Boolean         @default(false)
  thursday   Boolean         @default(false)
  friday     Boolean         @default(false)
  saturday   Boolean         @default(true)
  sunday     Boolean         @default(true)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  user       MasterProfile?
}

model MasterProfile {
  id             String             @id @default(uuid())
  biography      String?            @db.VarChar(100)
  weekendDays    MasterWeekendDays? @relation(fields: [weekendDaysID], references: [id])
  weekendDaysID  String?            @db.VarChar(36)
  startTime      Int?               /// Start work time / in milliseconds
  endTime        Int?               /// End work time / in milliseconds
  delayBefore    Int?               /// Delay before appointment / in milliseconds
  delayAfter     Int?               /// Delay after appointment / in milliseconds
  available      Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  user           User?
  services       MasterService?
  schedule       MasterSchedule?
  appointments   Appointment?

  @@map("MasterProfiile")
}

model ClientProfile {
  id            String    @id @default(uuid())
  available     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User?
  appointments  Appointment?

  @@map("ClientProfiile")
}

model UserPicture {
  id         String    @id @default(uuid())
  picture    Bytes     @db.ByteA()
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?

  @@map("UserPictures")
}

model Roles {
  id           String  @id @default(uuid())
  value        String  @db.VarChar(20)
  description  String  @db.VarChar(50)
  users        UserRoles[]
}

model User {
  id                    String         @id @default(uuid())
  username              String         @unique @db.VarChar(20)
  email                 String         @unique @db.VarChar(319)
  firstName             String?        @db.VarChar(30)
  lastName              String?        @db.VarChar(30)
  phoneNumber           String?        @unique @db.VarChar(13)
  password              String?        @db.VarChar(60)
  picture               UserPicture?   @relation(fields: [pictureID], references: [id])
  pictureID             String?        @db.VarChar(36)
  client                ClientProfile? @relation(fields: [clientID], references: [id])
  clientID              String?        @db.VarChar(36)
  master                MasterProfile? @relation(fields: [masterID], references: [id])
  masterID              String?        @db.VarChar(36)
  banned                Boolean        @default(false)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  auth                  Session?
  notificatinoActor     Notification?  @relation("actor")
  notificatinoNotifier  Notification?  @relation("notifier")
  roles                 UserRoles[]

  @@map("Users")
}

model UserRoles {
  user           User       @relation(fields: [userID], references: [id])
  userID         String     @db.VarChar(36)
  role           Roles       @relation(fields: [roleID], references: [id])
  roleID         String     @db.VarChar(36)

  @@id([userID, roleID])
}

model Session {
  id                  String    @id @default(uuid())
  user                User      @relation(fields: [userID], references: [id])
  userID              String    @db.VarChar(36)
  deviceName          String    @db.VarChar(30)
  refreshToken        String    @db.VarChar(1024)
  googleAccessToken   String?   @db.VarChar(1024)
  googleRefreshToken  String?   @db.VarChar(1026)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("Sessions")
}

model Service {
  id          String         @id @default(uuid())
  name        String         @unique @db.VarChar(30)
  available   Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  services    MasterService?

  @@map("Services")
}

model MasterService {
  id            String         @id @default(uuid())
  currency      String
  price         Int
  locationLat   Float
  locationLng   Float
  duration      Int
  service       Service        @relation(fields: [serviceID], references: [id])
  serviceID     String         @db.VarChar(36)
  master        MasterProfile  @relation(fields: [masterID], references: [id])
  masterID      String         @db.VarChar(36)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment?

  @@map("MasterServices")
}

model MasterSchedule {
  id         String         @id @default(uuid())
  master     MasterProfile  @relation(fields: [masterID], references: [id])
  masterID   String         @db.VarChar(36)
  startTime  Int
  endTime    Int
  weekend    Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Appointment {
  id               String          @id @default(uuid())
  masterService    MasterService   @relation(fields: [masterServiceID], references: [id])
  masterServiceID  String          @db.VarChar(36)
  master           MasterProfile   @relation(fields: [masterID], references: [id])
  masterID         String          @db.VarChar(36)
  client           ClientProfile   @relation(fields: [clientID], references: [id])
  clientID         String          @db.VarChar(36)
  clientConfirm    Boolean         @default(true)
  masterConfirm    Boolean         @default(false)
  masterCancel     Boolean         @default(false)
  startTime        DateTime
  endTime          DateTime
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("Appointments")
}

model Notification {
  id          String         @id @default(uuid())
  actor       User           @relation(fields: [actorID], references: [id], name: "actor")
  actorID     String         @db.VarChar(36)
  notifier    User           @relation(fields: [notifierID], references: [id], name: "notifier")
  notifierID  String         @db.VarChar(36)
  entity      Int
  entityType  Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("Notifications")
}
